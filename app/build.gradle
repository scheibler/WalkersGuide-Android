apply plugin: 'com.android.application'

// get signing properties
Properties keystoreProperties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (localProperties.getProperty('signingPropertiesFile') != null
            && new File(localProperties.getProperty('signingPropertiesFile')).exists()) {
        keystoreProperties.load(
                new FileInputStream(file(localProperties.getProperty('signingPropertiesFile'))))
    }
}
if (keystoreProperties.isEmpty()) {
    keystoreProperties.setProperty('storeFile', 'empty.keystore')
    keystoreProperties.setProperty('storePassword', 'storePassword')
    keystoreProperties.setProperty('keyAlias', 'keyAlias')
    keystoreProperties.setProperty('keyPassword', 'keyPassword')
}

android {
    compileSdkVersion 35
    namespace "org.walkersguide.android"

    defaultConfig {
        versionCode 43
        versionName '3.2.0-b5'
        minSdkVersion 21
        targetSdkVersion 35
        multiDexEnabled true
        resConfigs "en", "de", "uk"
        // contact data
        buildConfigField 'String', 'CONTACT_EMAIL', '"info@walkersguide.org"'
        buildConfigField 'String', 'CONTACT_WEBSITE', '"https://www.walkersguide.org"'
        // WalkersGuide server url
        buildConfigField 'String', 'SERVER_URL', '"https://api.walkersguide.org/"'
        buildConfigField 'String', 'SERVER_URL_DEV', '"https://api.test.walkersguide.org/"'
        // public-transport-enabler library
        buildConfigField 'String', 'PTE_LINK_MAIN_WEBSITE', '"https://github.com/schildbach/public-transport-enabler"'
        buildConfigField 'String', 'PTE_LINK_PROVIDER_LIST', '"https://github.com/schildbach/public-transport-enabler/tree/master/src/de/schildbach/pte"'
    }

    signingConfigs {

        beta {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }

        prod {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    flavorDimensions "version"
    productFlavors {

        beta {
            applicationId "org.walkersguide.android.beta"
            dimension "version"
            signingConfig signingConfigs.beta
            // internal database
            buildConfigField 'String', 'DATABASE_NAME', '"walkersguide.db"'
            buildConfigField 'Integer', 'DATABASE_VERSION', '13'
            // supported WalkersGuide server api versions
            buildConfigField 'int[]', 'SUPPORTED_API_VERSION_LIST', '{3, 4}'
        }

        prod {
            applicationId "org.walkersguide.android"
            dimension "version"
            signingConfig signingConfigs.prod
            // internal database
            buildConfigField 'String', 'DATABASE_NAME', '"walkersguide.db"'
            buildConfigField 'Integer', 'DATABASE_VERSION', '13'
            // supported WalkersGuide server api versions
            buildConfigField 'int[]', 'SUPPORTED_API_VERSION_LIST', '{3, 4}'
        }
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "WalkersGuide-${variant.flavorName}-${variant.versionName}-${variant.buildType.name}.apk"
        }
    }

    lintOptions {
        disable "GoogleAppIndexingWarning", "Autofill", "IconLauncherShape", "ButtonStyle"
        abortOnError true
        baseline file("lint-baseline.xml")
    }
}

dependencies {
    // androidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.core:core:1.15.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.fragment:fragment:1.8.5'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    // material design
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // google helpers
    implementation 'com.google.guava:guava:33.3.1-android'
    implementation 'com.google.code.gson:gson:2.10.1'

    // logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // public transport enabler
    implementation 'de.schildbach.pte:public-transport-enabler-2024-11-06@jar'
    implementation 'com.squareup.okhttp3:okhttp:3.12.13'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.13'
    implementation 'org.slf4j:slf4j-api:2.0.16'
}

// open the APK on your Android Device
android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "open${variant.name.capitalize()}", type: Exec,
                dependsOn: variant.install) {
            group = 'Open'
            description "Installs and opens the APK for ${variant.description}."
            doFirst {
                String activityClass = "org.walkersguide.android.ui.activity.MainActivity"
                commandLine android.adbExe, 'shell', 'am', 'start', '-n',
                        "${variant.applicationId}/${activityClass}"
            }
        }
    }
}

